
#include <jni.h>
#include <android/log.h>
#include <GLES3/gl3.h>
#include <GLES3/gl3ext.h>

/* DO NOT EDIT THIS FILE - it is machine generated */

//! JNI Information and Error Log
#define  LOG_TAG    "glOpenGLES3Native"
#define  LOGI(...)  __android_log_print(ANDROID_LOG_INFO, LOG_TAG,__VA_ARGS__)
#define  LOGE(...)  __android_log_print(ANDROID_LOG_ERROR,LOG_TAG,__VA_ARGS__)

/* Header for class com_example_init_GLESNativeLib */
#ifndef _Included_com_example_init_GLESNativeLib
#define _Included_com_example_init_GLESNativeLib


extern "C" {
    JNIEXPORT void JNICALL Java_com_example_init_GLESNativeLib_init(JNIEnv *, jclass, jstring);
    JNIEXPORT void JNICALL Java_com_example_init_GLESNativeLib_resize(JNIEnv *, jclass, jint, jint);
    JNIEXPORT void JNICALL Java_com_example_init_GLESNativeLib_step(JNIEnv *, jclass);
}

//! Load the Shader for compilation and linking
GLuint loadAndCompileShader(GLenum shaderType, const char* sourceCode);

//! Create program object and link program.
GLuint linkShader(GLuint vertShaderID, GLuint fragShaderID);

//! Create vertex and fragment shader executable program.
GLuint createProgramExec(const char* vertexSource, const char* fragmentSource);

//! Print information or error message.
void printOpenGLESInfo();

//! Initialize the shader.
bool GraphicsInit();

//! Set the Viewport with provide width and height.
bool GraphicsResize( int width, int height );

//! Render the triangle geometry.
bool GraphicsRender();


#endif
